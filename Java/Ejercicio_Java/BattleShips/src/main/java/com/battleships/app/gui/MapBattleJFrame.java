/*
 * The MIT License
 *
 * Copyright 2023 tomas.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


package com.battleships.app.gui;


import com.battleships.app.controller.ClientBattleController;
import com.battleships.app.controller.ServerBattleController;

import java.awt.Font;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;


import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;

/**
*
* @author kurotom
* https://github.com/kurotom
* @version 1.0
* 
* 
* 
*/


public class MapBattleJFrame extends javax.swing.JFrame {
	
	private static final long serialVersionUID = 1L;
	private ServerBattleController serverControllerBattle = null;
	private ClientBattleController clientControllerBattle = null;

	
    /**
     * @wbp.parser.constructor
     */
    public MapBattleJFrame(Integer sizeMap, ServerBattleController controllerServer) {
    	this.sizeMap = sizeMap;
    	
        if (sizeMap == 7) {
        	this.amountShips = 4;
            heavyShipAmount = 1;
            mediumShipAmount = 2;
            lightShipAmount = 1;
        }
        if (sizeMap == 10) {
        	this.amountShips = 5;
            heavyShipAmount = 2;
            mediumShipAmount = 2;
            lightShipAmount = 1;
        }
        if (sizeMap == 13) {
        	this.amountShips = 6;
            heavyShipAmount = 2;
            mediumShipAmount = 3;
            lightShipAmount = 1;
        }

        serverControllerBattle = controllerServer;
        
//
//      metodos se "init" después de asignar los valores
    	initComponents();
    }
    public MapBattleJFrame(Integer sizeMap, ClientBattleController controllerClient) {
    	this.sizeMap = sizeMap;
    	
        if (sizeMap == 7) {
        	this.amountShips = 4;
            heavyShipAmount = 1;
            mediumShipAmount = 2;
            lightShipAmount = 1;
        }
        if (sizeMap == 10) {
        	this.amountShips = 5;
            heavyShipAmount = 2;
            mediumShipAmount = 2;
            lightShipAmount = 1;
        }
        if (sizeMap == 13) {
        	this.amountShips = 6;
            heavyShipAmount = 2;
            mediumShipAmount = 3;
            lightShipAmount = 1;
        }

        clientControllerBattle = controllerClient;
        
//
//      metodos se inicial después de asignar los valores
    	initComponents();
    }
	

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel2.setBorder(null);
        lightShipRadio = new javax.swing.JRadioButton();
        lightShipRadio.setFont(new Font("Courier 10 Pitch", Font.PLAIN, 16));
        heavyShipRadio = new javax.swing.JRadioButton();
        heavyShipRadio.setFont(new Font("Courier 10 Pitch", Font.PLAIN, 16));
        mediumShipRadio = new javax.swing.JRadioButton();
        mediumShipRadio.setFont(new Font("Courier 10 Pitch", Font.PLAIN, 16));
        lightUnitRemaining = new javax.swing.JLabel();
        mediumUnitRemaining = new javax.swing.JLabel();
        heavyUnitRemaining = new javax.swing.JLabel();
        deployButton = new javax.swing.JButton();
        deployButton.setFont(new Font("Courier 10 Pitch", Font.BOLD, 16));
        toBattleButton = new javax.swing.JButton();
        toBattleButton.setFont(new Font("Courier 10 Pitch", Font.BOLD, 16));
        jPanel3 = new javax.swing.JPanel();
        jPanel3.setBorder(null);
        disponibleItems = new javax.swing.JLabel();
        disponibleItems.setFont(new Font("Courier 10 Pitch", Font.BOLD, 16));
        labelUnitsRemaining = new javax.swing.JLabel();
        labelUnitsRemaining.setFont(new Font("Courier 10 Pitch", Font.PLAIN, 16));
        jPanel5 = new javax.swing.JPanel();
        jPanel5.setBorder(null);
        jPanel6 = new javax.swing.JPanel();
        jPanel6.setBorder(null);
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setViewportBorder(null);
        mapaTable = new javax.swing.JTable();
        mapaTable.setBorder(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        
        List<String> strings = List.of(headCoord.substring(0, sizeMap + 1).toUpperCase().split(""));
        
        DefaultTableModel modeloDefaultTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false to edit
               return false;
            }
        };
        
        modeloDefaultTabla.setColumnCount(this.sizeMap);
        modeloDefaultTabla.setRowCount(this.sizeMap);
        
        
        for (int i = 0; i <= this.sizeMap; i++) {
        	modeloDefaultTabla.setColumnIdentifiers(strings.toArray());
        }
        
        mapaTable.setModel(modeloDefaultTabla);
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {};
        renderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i <= this.sizeMap; i++) {
        	mapaTable.getColumnModel().getColumn(i).setCellRenderer(renderer);        	
        };
        
        for (int i = 0; i < mapaTable.getRowCount(); i++) {
        	mapaTable.setValueAt(String.valueOf(i + 1), i, 0);
        	sizeScrollPane1 += 21;
        }
        
        mapaTable.setBorder(null);
        mapaTable.setRowHeight(20);
        
        mapaTable.getTableHeader().setDefaultRenderer(renderer);
        mapaTable.setColumnSelectionAllowed(true);        
        mapaTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(mapaTable);
        mapaTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
//        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 80));

        if (mapaTable.getColumnModel().getColumnCount() > 0) {
        	Enumeration<TableColumn> enteros = mapaTable.getColumnModel().getColumns();
        	enteros.asIterator().forEachRemaining(item -> {
//        		item.setPreferredWidth(20);
//        		item.setMinWidth(40);
//        		item.setMaxWidth(40);
        		item.setResizable(false);
        	});
        }
        

        deployButton.setText("Deploy");
        deployButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deployButtonMouseClicked(evt);
            }
        });

        lightShipRadio.setText("Light cruiser");
        lightShipRadio.setSelected(true);
        lightShipRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lightShipRadioMouseClicked(evt);
            }
        });

        mediumShipRadio.setText("Destroyer");
        mediumShipRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mediumShipRadioMouseClicked(evt);
            }
        });

        heavyShipRadio.setText("Battleships");
        heavyShipRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                heavyShipRadioMouseClicked(evt);
            }
        });
        
        toBattleButton.setText("To Battle!");
        toBattleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toBattleButtonMouseClicked(evt);
            }
        });

        
        jPanel1.setBorder(null);
//        jPanel1.setPreferredSize(new java.awt.Dimension(90, 35));

        disponibleItems.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        disponibleItems.setText(String.valueOf(this.amountShips));
//        disponibleItems.setPreferredSize(new java.awt.Dimension(10, 20));

        labelUnitsRemaining.setText("Units remaining");
        
        labelLigthAmount = new JLabel(String.valueOf(lightShipAmount));
        labelLigthAmount.setHorizontalAlignment(SwingConstants.CENTER);
        labelLigthAmount.setFont(new Font("Courier 10 Pitch", Font.BOLD, 16));
        
        labelMediumAmount = new JLabel(String.valueOf(mediumShipAmount));
        labelMediumAmount.setHorizontalAlignment(SwingConstants.CENTER);
        labelMediumAmount.setFont(new Font("Courier 10 Pitch", Font.BOLD, 16));
        
        labelHeavyAmount = new JLabel(String.valueOf(heavyShipAmount));
        labelHeavyAmount.setHorizontalAlignment(SwingConstants.CENTER);
        labelHeavyAmount.setFont(new Font("Courier 10 Pitch", Font.BOLD, 16));
//        labelUnitsRemaining.setPreferredSize(new java.awt.Dimension(40, 20));
        
        

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(lightShipRadio)
        					.addGap(5)
        					.addComponent(labelLigthAmount)
        					.addGap(18)
        					.addComponent(mediumShipRadio)
        					.addGap(5)
        					.addComponent(labelMediumAmount, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(heavyShipRadio)
        					.addGap(5)
        					.addComponent(labelHeavyAmount, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE))
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addGap(378)
        					.addComponent(lightUnitRemaining)
        					.addGap(105)
        					.addComponent(mediumUnitRemaining)
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(heavyUnitRemaining)))
        			.addGap(11))
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGap(10)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lightUnitRemaining)
        				.addComponent(mediumUnitRemaining)
        				.addComponent(heavyUnitRemaining))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lightShipRadio)
        				.addComponent(labelLigthAmount)
        				.addComponent(labelMediumAmount)
        				.addComponent(mediumShipRadio)
        				.addComponent(heavyShipRadio)
        				.addComponent(labelHeavyAmount))
        			.addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel2.setLayout(jPanel2Layout);
        
        
        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3Layout.setHorizontalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addGap(173)
        			.addComponent(labelUnitsRemaining)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(disponibleItems)
        			.addContainerGap(188, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(Alignment.LEADING, jPanel3Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(disponibleItems)
        				.addComponent(labelUnitsRemaining))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3.setLayout(jPanel3Layout);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(80)
        			.addComponent(deployButton)
        			.addPreferredGap(ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
        			.addComponent(toBattleButton)
        			.addGap(80))
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        			.addContainerGap())
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        			.addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
        			.addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(deployButton)
        				.addComponent(toBattleButton))
        			.addContainerGap())
        );
        jPanel1.setLayout(jPanel1Layout);
        
///////////////////////////////////////////////////////////////////////////////////
        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6Layout.setHorizontalGroup(
        	jPanel6Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel6Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
        			.addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
        	jPanel6Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel6Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, sizeScrollPane1, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6.setLayout(jPanel6Layout);
        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5Layout.setHorizontalGroup(
        	jPanel5Layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
        	jPanel5Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel5Layout.createSequentialGroup()
        			.addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, sizeScrollPane1, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel5.setLayout(jPanel5Layout);
        
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
//        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jPanel1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        				.addComponent(jPanel5, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, sizeScrollPane1, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    private void deployButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deployButtonMouseClicked
        if (this.amountShips > 0) {
            if (lightShipRadio.isSelected()) {
            	if (mapaTable.getSelectedColumns()[0] > 0) {
            		if (lightShipAmount > 0) {
                		if (mapaTable.getSelectedColumns().length == 1 && mapaTable.getSelectedRows().length == 1) {
                			lightShipAmount--;
                			labelLigthAmount.setText(String.valueOf(lightShipAmount));
                			dibujarItemMapa("l", "light", 1);
                		} else if (mapaTable.getSelectedColumns().length == 1 && mapaTable.getSelectedRows().length == 1) {
                			lightShipAmount--;
                			labelLigthAmount.setText(String.valueOf(lightShipAmount));
                			dibujarItemMapa("l", "light", 1);
                		} else {
                			JOptionPane.showMessageDialog(this, "Must be 1 cell horizontal or vertical.");
                		}
            		}
            	}
            }
            if (mediumShipRadio.isSelected()) {
            	if (mapaTable.getSelectedColumns()[0] > 0) {
            		if (mediumShipAmount > 0) {
                		if (mapaTable.getSelectedColumns().length == 1 && mapaTable.getSelectedRows().length == 2) {
                			mediumShipAmount--;
                			labelMediumAmount.setText(String.valueOf(mediumShipAmount));
                			dibujarItemMapa("m", "medium", 2);
                		} else if (mapaTable.getSelectedColumns().length == 2 && mapaTable.getSelectedRows().length == 1) {
                			mediumShipAmount--;
                			labelMediumAmount.setText(String.valueOf(mediumShipAmount));
                			dibujarItemMapa("m", "medium", 2);
                		} else {
                			JOptionPane.showMessageDialog(this, "Must be 2 cells horizontal or vertical.");
                		}
            		}
            	}
            }
            if (heavyShipRadio.isSelected()) {
            	if (mapaTable.getSelectedColumns()[0] > 0) {
            		if (heavyShipAmount > 0) {
                		if (mapaTable.getSelectedColumns().length == 1 && mapaTable.getSelectedRows().length == 3) {
                			heavyShipAmount--;
                			labelHeavyAmount.setText(String.valueOf(heavyShipAmount));
                			dibujarItemMapa("h", "heavy", 3);
                		} else  if (mapaTable.getSelectedColumns().length == 3 && mapaTable.getSelectedRows().length == 1) {
                			heavyShipAmount--;
                			labelHeavyAmount.setText(String.valueOf(heavyShipAmount));
                			dibujarItemMapa("h", "heavy", 3);
                		} else {
                			JOptionPane.showMessageDialog(this, "Must be 3 cells horizontal or vertical.");
                		}
            		}
            		
            		
            	}
            }
        }
    }//GEN-LAST:event_deployButtonMouseClicked

    private void lightShipRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lightShipRadioMouseClicked
        if (lightShipRadio.isSelected()) {
            lightShipRadio.setSelected(true);
            mediumShipRadio.setSelected(false);
            heavyShipRadio.setSelected(false);
        }
    }//GEN-LAST:event_lightShipRadioMouseClicked

    private void mediumShipRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mediumShipRadioMouseClicked
        if (mediumShipRadio.isSelected()) {
            lightShipRadio.setSelected(false);
            mediumShipRadio.setSelected(true);
            heavyShipRadio.setSelected(false);
        }
    }//GEN-LAST:event_mediumShipRadioMouseClicked

    private void heavyShipRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heavyShipRadioMouseClicked
        if (heavyShipRadio.isSelected()) {
            lightShipRadio.setSelected(false);
            mediumShipRadio.setSelected(false);
            heavyShipRadio.setSelected(true);
        }
    }//GEN-LAST:event_heavyShipRadioMouseClicked

    private void toBattleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toBattleButtonMouseClicked
    	if (amountShips == 0) {

    		if (serverControllerBattle != null) {
        		if (serverControllerBattle.isConnected()) {
            		serverControllerBattle.setCoords(listaCoordenadas);
            		battleViewJFrame = new BattleViewJFrame(serverControllerBattle, this.sizeMap);
                    battleViewJFrame.setVisible(true);
                    this.setVisible(false);
        		} else {
        			serverControllerBattle.close();
        			serverControllerBattle.runServer(serverControllerBattle);
        			JLabel label = new JLabel("No client connected, try again.");
        			label.setFont(new Font("Dialog", Font.CENTER_BASELINE, 18));
        			JOptionPane.showMessageDialog(this, label);
        		}
        	}
    		
    		if (clientControllerBattle != null) {
    			if (clientControllerBattle.isConnected()) {
            		clientControllerBattle.setCoords(listaCoordenadas);
            		battleViewJFrame = new BattleViewJFrame(clientControllerBattle, this.sizeMap);
                    battleViewJFrame.setVisible(true);
                    this.setVisible(false);
    			} else {
    				clientControllerBattle.close();
    				clientControllerBattle.runClient(clientControllerBattle);
        			
    				JLabel label = new JLabel("Server not found, try again.");
        			label.setFont(new Font("Dialog", Font.CENTER_BASELINE, 18));
        			JOptionPane.showMessageDialog(this, label);
    			}

        	}
    		

    		
    		
    	} else {
    		JOptionPane.showMessageDialog(this, String.format("Deploy all units, %s unit remaining.", amountShips));
    	}
        
    }//GEN-LAST:event_toBattleButtonMouseClicked



    private void dibujarItemMapa(String insignia, String tipoBarco, Integer tamano) {

        List<List> coords = new ArrayList<>();
                
        int[] columnsSelected = mapaTable.getSelectedColumns();
        int[] rowsSelected = mapaTable.getSelectedRows();
        
//  Horizontal
        if (columnsSelected.length > 1 && rowsSelected.length == 1) {
            if (tipoBarco.compareTo("heavy") == 0 || tipoBarco.compareTo("medium") == 0) {
                for (int x = 0; x < tamano; x++) {
                    
                    List<Integer> c = new ArrayList<>();
                    c.add(columnsSelected[x]); // Eje X
                    c.add(rowsSelected[0]);    // Eje Y 
                    coords.add(c);

                    mapaTable.setValueAt(insignia, rowsSelected[0], columnsSelected[x]);
                    
                }
                if (this.amountShips > 0) {
                	this.amountShips--;
                	
                }
                listaCoordenadas.add(coords);
            }
        } 
//  Vertical
        else if (columnsSelected.length == 1 && rowsSelected.length > 1) {
            if (tipoBarco.compareTo("heavy") == 0 || tipoBarco.compareTo("medium") == 0) {
                for (int y = 0; y < tamano; y++) {
                    
                    List<Integer> c = new ArrayList<>();
                    c.add(columnsSelected[0]); // Eje X
                    c.add(rowsSelected[y]);    // Eje Y 
                    coords.add(c);                    
                    
                    mapaTable.setValueAt(insignia, rowsSelected[y], columnsSelected[0]);
                }
                if (this.amountShips > 0) {
                	this.amountShips--;
                }
                listaCoordenadas.add(coords);
            }
        }
//  Horizontal/Vertical - 1 SLOT
        else if (columnsSelected.length == 1 && rowsSelected.length == 1) {
            if (tipoBarco.compareTo("light") == 0) {
                
                List<Integer> c = new ArrayList<>();     
                c.add(columnsSelected[0]); // Eje X
                c.add(rowsSelected[0]);    // Eje Y
                coords.add(c);
                
                mapaTable.setValueAt(insignia, rowsSelected[0], columnsSelected[0]);

                if (this.amountShips > 0) {
                	this.amountShips--;
                }

            }
            listaCoordenadas.add(coords);
        }

        disponibleItems.setText(String.valueOf(this.amountShips));
    }
    
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapBattleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapBattleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapBattleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapBattleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	
            	ServerBattleController controllerServer = new ServerBattleController();
            	controllerServer.setName("Server");
            	controllerServer.setIp("localhost");
            	controllerServer.runServer(controllerServer);
            	MapBattleJFrame mapaBattleSV = new MapBattleJFrame(7, controllerServer);
            	mapaBattleSV.setVisible(true);
            	
            	ClientBattleController controllerClient = new ClientBattleController();
            	controllerClient.setName("Client");
            	controllerClient.setIp("localhost");
            	controllerClient.runClient(controllerClient);
            	MapBattleJFrame mapaBattleCL = new MapBattleJFrame(7, controllerClient);
            	mapaBattleCL.setVisible(true);
            	
            }
        });
    }
    
    
    private List<List<List>> listaCoordenadas = new ArrayList<>();
    

    private Integer sizeScrollPane1 = 21;
    private Integer amountShips = 0;
    private Integer heavyShipAmount = 0;
    private Integer mediumShipAmount = 0;
    private Integer lightShipAmount = 0;

    private Integer sizeMap = 0;
    private String headCoord = "-abcdefghijklmnopqrstuvwxyz";
    
    
    private BattleViewJFrame battleViewJFrame;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deployButton;
    private javax.swing.JLabel disponibleItems;
    private javax.swing.JRadioButton heavyShipRadio;
    private javax.swing.JLabel heavyUnitRemaining;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelUnitsRemaining;
    private javax.swing.JRadioButton lightShipRadio;
    private javax.swing.JLabel lightUnitRemaining;
    private javax.swing.JTable mapaTable;
    private javax.swing.JRadioButton mediumShipRadio;
    private javax.swing.JLabel mediumUnitRemaining;
    private javax.swing.JButton toBattleButton;
    private JLabel labelLigthAmount;
    private JLabel labelMediumAmount;
    private JLabel labelHeavyAmount;
    // End of variables declaration//GEN-END:variables
}
