/*
 * The MIT License
 *
 * Copyright 2023 tomas.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


package com.battleships.app.gui;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import com.battleships.app.controller.ClientBattleController;
import com.battleships.app.controller.ServerBattleController;


import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.SwingConstants;

import java.awt.Font;


/**
*
* @author kurotom
* https://github.com/kurotom
* @version 1.0
* 
* 
* 
*/



public class BattleViewJFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
    /**
     * Creates new form BattleViewJFrame
     */
	
	ClientBattleController clientController = null;
	ServerBattleController serverController = null;
	
	List<List> listaUsados = new ArrayList<>();
	
	
    public BattleViewJFrame(ClientBattleController controller, Integer sizemap) {
    	clientController = controller; 
    	
    	this.setTitle(clientController.getName());
    	this.playerLife = clientController.amountLive();
    	this.sizeMap = sizemap;
    	
    	initComponents();
    	this.llenarMapClient(clientController.getCoords());
    }
	
    public BattleViewJFrame(ServerBattleController controller, Integer sizemap) {
    	serverController = controller; 
    	
    	this.setTitle(serverController.getName());
    	this.playerLife = serverController.amountLive();
    	this.sizeMap = sizemap;
        
    	initComponents();
    	this.llenarMapServer(serverController.getCoords());
    }
	
	
	
    public BattleViewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        playerMap = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        oponentMap = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSurrender = new javax.swing.JButton();
        attackButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblLife = new javax.swing.JLabel();
        labelLifeAmount = new javax.swing.JLabel();
        playerStatusLabel = new javax.swing.JLabel();
        attackStatusLabel = new javax.swing.JLabel();

//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
        	public void windowClosing(WindowEvent e) {
        		if (serverController != null) {
        			serverController.close();
        			System.exit(0);
        		}
        		if (clientController != null) {
        			clientController.close();
        			System.exit(0);
        		}
        	}
		});
        setResizable(false);
        
        
        List<String> strings = List.of(headCoord.substring(0, sizeMap + 1).toUpperCase().split(""));
        
        
        
        DefaultTableModel modeloTablePlayer = new DefaultTableModel() {
        	@Override
        	public boolean isCellEditable(int row, int column) {
        		return false;
        	}
        };
        
        modeloTablePlayer.setColumnCount(this.sizeMap);
        modeloTablePlayer.setRowCount(this.sizeMap);
        
        for (int i = 0; i <= this.sizeMap; i++) {
        	modeloTablePlayer.setColumnIdentifiers(strings.toArray());
        }
        
        playerMap.setModel(modeloTablePlayer);
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {};
        renderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i <= this.sizeMap; i++) {
        	playerMap.getColumnModel().getColumn(i).setCellRenderer(renderer);        	
        };
        
        for (int i = 0; i < playerMap.getRowCount(); i++) {
        	playerMap.setValueAt(String.valueOf(i + 1), i, 0);
        }
        
        playerMap.getTableHeader().setDefaultRenderer(renderer);
        playerMap.setColumnSelectionAllowed(true);        
        playerMap.getTableHeader().setReorderingAllowed(false);
        playerMap.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);        

        if (playerMap.getColumnModel().getColumnCount() > 0) {
        	Enumeration<TableColumn> enteros = playerMap.getColumnModel().getColumns();
        	enteros.asIterator().forEachRemaining(item -> {
        		item.setPreferredWidth(20);
        		item.setResizable(false);
        	});
        }
//        TODO
        jScrollPane2.setViewportView(playerMap);
        jScrollPane2.setPreferredSize(playerMap.getPreferredSize());
        jScrollPane2.setBorder(null);
        
        
        DefaultTableModel modeloTableOponent = new DefaultTableModel() {
        	@Override
        	public boolean isCellEditable(int row, int column) {
        		return false;
        	}
        };
        
        modeloTableOponent.setColumnCount(this.sizeMap);
        modeloTableOponent.setRowCount(this.sizeMap);
        
        for (int i = 0; i <= this.sizeMap; i++) {
        	modeloTableOponent.setColumnIdentifiers(strings.toArray());
        }
        
        oponentMap.setModel(modeloTableOponent);
        
        for (int i = 0; i < oponentMap.getRowCount(); i++) {
        	oponentMap.setValueAt(String.valueOf(i + 1), i, 0);
        	sizeScrollPane += 21;
        }
        
//        DefaultTableCellRenderer renderer2 = new DefaultTableCellRenderer() {};
        renderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i <= this.sizeMap; i++) {
        	oponentMap.getColumnModel().getColumn(i).setCellRenderer(renderer);        	
        };
        
        for (int i = 0; i < oponentMap.getRowCount(); i++) {
        	oponentMap.setValueAt(String.valueOf(i + 1), i, 0);
        }
        
        oponentMap.getTableHeader().setDefaultRenderer(renderer);

        if (oponentMap.getColumnModel().getColumnCount() > 0) {
        	Enumeration<TableColumn> enteros = oponentMap.getColumnModel().getColumns();
        	enteros.asIterator().forEachRemaining(item -> {
        		item.setPreferredWidth(20);
        		item.setResizable(false);
        	});
        }
                
        oponentMap.setColumnSelectionAllowed(true);        
        oponentMap.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane3.setViewportView(oponentMap);
        jScrollPane3.setPreferredSize(oponentMap.getPreferredSize());
        jScrollPane3.setViewportView(oponentMap);
        jScrollPane3.setBorder(null);
        
        oponentMap.setRowHeight(20);
        playerMap.setRowHeight(20);
        
        oponentMap.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);


        attackButton.setText("Attack");
        attackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	if (attackButton.isEnabled()) {
            		attackButtonMouseClicked(evt);
            	}
            }
        });
        
        btnSurrender.setText("Surrender");
        btnSurrender.addMouseListener(new MouseAdapter() {
        	@Override
            public void mouseClicked(MouseEvent e) {
            	System.out.println("Surrender");
            	if (Integer.valueOf(labelLifeAmount.getText()) > 1) {
                	if (serverController != null) {
                		btnSurrender.setEnabled(false);
                		serverController.sendSurrender();
                		serverController.defeatMessage();
                	}
                	if (clientController != null) {
                		btnSurrender.setEnabled(false);
                		clientController.sendSurrender();
                		clientController.defeatMessage();                		
                	}
            	}
            }
        });
        
        lblLife.setFont(new java.awt.Font("Courier 10 Pitch", 0, 18)); // NOI18N
        lblLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLife.setText("Your life");
        
        
        playerStatusLabel = new JLabel("");
        playerStatusLabel.setHorizontalAlignment(SwingConstants.CENTER);
        playerStatusLabel.setFont(new Font("Courier 10 Pitch", Font.BOLD, 22));
        
        attackStatusLabel = new JLabel("");
        attackStatusLabel.setHorizontalAlignment(SwingConstants.CENTER);
        attackStatusLabel.setFont(new Font("Courier 10 Pitch", Font.BOLD, 22));
        
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Player Map");
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 30));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Oponent Map");
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 30));

        btnSurrender.setFont(new Font("Courier 10 Pitch", Font.PLAIN, 15));
        btnSurrender.setText("Surrender");
        btnSurrender.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSurrender.setPreferredSize(new java.awt.Dimension(100, 30));

        attackButton.setFont(new Font("Courier 10 Pitch", Font.PLAIN, 15));
        attackButton.setText("Attack!");
        attackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        attackButton.setPreferredSize(new java.awt.Dimension(100, 30));

        jPanel2.setPreferredSize(new java.awt.Dimension(0, 70));


        labelLifeAmount.setFont(new java.awt.Font("Courier 10 Pitch", Font.BOLD, 20)); // NOI18N
        labelLifeAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLifeAmount.setText("");
        labelLifeAmount.setText(String.valueOf(playerLife));
        

        
        
        if (serverController != null) {
        	serverController.setTableMapPlayer(playerMap);
        	serverController.setTableMapOponent(oponentMap);
        	serverController.setPlayeLifeLabel(labelLifeAmount);
        	serverController.setStatusAttackLabel(attackStatusLabel);
        	serverController.setStatusPlayerLabel(playerStatusLabel);
        	serverController.setAttackButton(attackButton);
        	serverController.setSurrenderButton(btnSurrender);
        	serverController.setFrame(this);
        }
        if (clientController != null) {
        	clientController.setTableMapPlayer(playerMap);
        	clientController.setTableMapOponent(oponentMap);
        	clientController.setPlayeLifeLabel(labelLifeAmount);
        	clientController.setStatusAttackLabel(attackStatusLabel);
        	clientController.setStatusPlayerLabel(playerStatusLabel);
        	clientController.setAttackButton(attackButton);
        	clientController.setSurrenderButton(btnSurrender);
        	clientController.setFrame(this);
        }
////        TODO
//        jScrollPane3.setViewportView(oponentMap);


        
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(lblLife, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelLifeAmount)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLifeAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLife, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSurrender, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(playerStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(attackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(attackStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, sizeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, sizeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE))
//                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSurrender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(attackStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void attackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attackButtonMouseClicked
		int column = oponentMap.getSelectedColumn();
		int row = oponentMap.getSelectedRow();

		List<Integer> targetCoords = new ArrayList<>();
		targetCoords.add(column);
		targetCoords.add(row);
		
		if (column > 0) {
    		if (listaUsados.contains(targetCoords) == false) {
    			listaUsados.add(targetCoords);
    			attackStatusLabel.setText("");
    			playerStatusLabel.setText("");

    			if (serverController != null) {
    				serverController.sendCoords(targetCoords);

    			}
    			if (clientController != null) {
    				clientController.sendCoords(targetCoords);
		
    			}
    		}
            
		}
    }
    
    private void llenarMapServer(List<List<List>> coordenadasLista) {
    	coordenadasLista.forEach(coordList -> {
            coordList.forEach(item -> {
                
                Integer x = Integer.valueOf(item.get(0).toString());
                Integer y = Integer.valueOf(item.get(1).toString());

                playerMap.setValueAt("*", y, x);
                
            });
        });        
    }
    
    private void llenarMapClient(List<List<List>> coordenadasLista) {
    	coordenadasLista.forEach(coordList -> {
            coordList.forEach(item -> {
                
                Integer x = Integer.valueOf(item.get(0).toString());
                Integer y = Integer.valueOf(item.get(1).toString());

                playerMap.setValueAt("*", y, x);
                
            });
        });        
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleViewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleViewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleViewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleViewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	
                List<List<List>> coords = new ArrayList<>();
                
                List<List> coo = new ArrayList<>();
                
                List<Integer> a = new ArrayList<>();
                List<Integer> b = new ArrayList<>();
                List<Integer> c = new ArrayList<>();
                
                a.add(1); // Eje X
                a.add(0); // Eje Y
                
                b.add(2); // Eje X
                b.add(0); // Eje Y
                
                c.add(3); // Eje X
                c.add(0); // Eje Y
                
                
                coo.add(a);
                coo.add(b);
                coo.add(c);
                
                coords.add(coo);
                
                Integer[] axx = {5,3};
                List<Integer> ax = List.of(axx);
                List<List> axL = List.of(ax);
                coords.add(axL);
                
                System.out.println("________________________________");

            	ServerBattleController serverController = new ServerBattleController();
            	serverController.setName("SERVIDOR");
            	serverController.setIp("localhost");
            	serverController.runServer(serverController);
            	serverController.setCoords(coords);
            	BattleViewJFrame battleViewJFrameServer = new BattleViewJFrame(serverController, 7);
            	battleViewJFrameServer.setVisible(true);
            	
            	
            	ClientBattleController clienteController = new ClientBattleController();
            	clienteController.setName("CLIENTE");
            	clienteController.setIp("localhost");
            	clienteController.runClient(clienteController);
            	clienteController.setCoords(coords);
            	BattleViewJFrame battleViewJFrameCliente = new BattleViewJFrame(clienteController, 7);
            	battleViewJFrameCliente.setVisible(true);
            	
            	System.out.println("________________________________");
            	
            }
        });
    }
    
    private Integer sizeScrollPane = 21;
    private Integer sizeMap;
    private String headCoord = "-abcdefghijklmnopqrstuvwxyz";
    
    private Integer playerLife = 0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attackButton;
    private javax.swing.JLabel attackStatusLabel;
    private javax.swing.JButton btnSurrender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelLifeAmount;
    private javax.swing.JLabel lblLife;
    private javax.swing.JTable oponentMap;
    private javax.swing.JTable playerMap;
    private javax.swing.JLabel playerStatusLabel;
    // End of variables declaration//GEN-END:variables
}

